<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-08-23T15:05:26-07:00</updated><id>http://localhost:4000/</id><title type="html">Alex On Code</title><subtitle>write code
</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2017/08/04/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-08-04T06:36:14-07:00</published><updated>2017-08-04T06:36:14-07:00</updated><id>http://localhost:4000/jekyll/update/2017/08/04/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/08/04/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Passing Javascript Variables to Rails Controller</title><link href="http://localhost:4000/jekyll/update/2014/01/26/passing-javascript-variables-to-rails-controller.html" rel="alternate" type="text/html" title="Passing Javascript Variables to Rails Controller" /><published>2014-01-26T05:36:14-08:00</published><updated>2014-01-26T05:36:14-08:00</updated><id>http://localhost:4000/jekyll/update/2014/01/26/passing-javascript-variables-to-rails-controller</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2014/01/26/passing-javascript-variables-to-rails-controller.html">&lt;p&gt;“To the man who only has a hammer, everything he encounters begins to look like a nail.”&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Abraham Harold Maslow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ruby is an amazing programming language.  It ships with beautiful syntax, an extensive standard library, and more open source libraries  (via gems) than we could ever know what to do with.  However, every job requires different tools, and while there are almost always multiple ways to address a problem, I firmly believe you should make your life easier and pick the right tool for the job at hand. Ruby works great on the server side of most web applications, however when it comes to client-side programming there is no doubt that JavaScript reigns supreme.  Theres a reason it is often referred to as the language of the browser.  An understanding of JavaScript is a must for any modern day web developer and with the emergence of many awesome HTML5 APIs you would be missing out on a lot of fun if you didn’t have at least a basic understanding of it.&lt;/p&gt;

&lt;p&gt;JavaScript runs on the client-side, while Ruby runs on the server-side of Rails projects.  Without going into too much detail, the internet is quite simple.  You type a URL into an address bar and see a website.  But what is actually happening? Well, a client, such as yourself, types in this URL and hits enter.  This sends an HTTP GET request to a server asking for the resource which is stored at that specific location.  Remember, URL simply stands for universal resource locator. In other words, a URL can be compared to the street address of some information that you want.  If your computer has provided the correct information about itself then the server answers with an HTTP response containing the stuff that you want, organizes the HTML files into a tree known as the DOM, at which point you are able to see the website how you’re used to seeing websites, and then runs the necessary JavaScript files.  This JavaScript then manipulates the content that has been delivered by the server - hence the name client side scripting.  Data getting sent to a server is quite similar.  To break it down very simply let’s just say that data is sent to a server via an HTTP POST request, The server receives the request and Ruby manipulates that data. If it receives a GET request for that data, the server proceeds to send it back to the browser (you) at which point JavaScript takes its turn again manipulating the returned content.&lt;/p&gt;

&lt;p&gt;Most of the time you will be using JavaScript to manipulate content in the browser that has been returned from a server - and there will be times when you will want send some data back to the server for Ruby to work on.  How would you go about doing this?  JavaScript and Ruby are two different programming languages.  All of the code in between erb tags &amp;lt;%= %&amp;gt; is executed on the server, while any code between script tags &lt;script&gt;&lt;/script&gt; gets executed on the client. In other words these languages have no idea each other exists.  The easiest way to get JavaScript data back to the server is how most new data gets there - a form.&lt;/p&gt;

&lt;p&gt;I came across this very problem recently in a project I’m working on. The premise of the app is that it gets a user’s current Latitude and Longitude via the HTML5 Geolocation API, makes a call to the Google Maps API, which returns a link to an image of that user’s Lat and Long marked on a map, followed by an API call to the Bit.ly API to retrieve a shortened URL of this link, all because finally I must POST this data to the Twilio API via a create action in one of my controllers to send a text containing this data to another user’s phone number.  The problem is that all of this happens on the client side via JavaScript and I must get it to my controller to POST to Twilio, save as a record in the DB and possibly call on some more external services in the feature (its always best to keep your software as flexible as possible for future iterations).&lt;/p&gt;

&lt;p&gt;I knew that if I could somehow get the data into a form I could submit it to the controller.  Since JavaScript allows us to manipulate just about anything on a web page, then this problem should be no challenge for such a powerful programming language.  Don’t worry If you’re not even a little bit familiar with JavaScript/jQuery or the DOM, the following will only be a high level overview of my code.&lt;/p&gt;

&lt;p&gt;The app is quite simple.  A user that wants to request a friend’s location visits a home page.  He or she fills in their phone number and a phone number for the friend who’s location they want.&lt;/p&gt;

&lt;p&gt;image&lt;/p&gt;

&lt;p&gt;A hyperlink is sent as a text message to the friend’s phone with a query string containing the original senders phone number set to the phonenumber parameter (my next post will cover how we solved data persistence in this app). When the friend clicks the link, a url of my app is opened, containing some JS code that executes upon page load. This JavaScript doesn’t only get the user’s lat/long, but also is the key to passing itself to my controller for further processing.  So, how does this work?&lt;/p&gt;

&lt;p&gt;I have a form routed to the create action of my twilio_messages_controller:&lt;/p&gt;

&lt;p&gt;twilio_messages/new_html_erb&lt;/p&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;form_for&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@twilio_message&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hidden_field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valu&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:e&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:phonenumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hidden_field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;value: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;+19498607430&quot;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hidden_field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;value: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Send ETA!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;class: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;submit enabled&quot;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;twilio_messages_controller.rb&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;account_sid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TWILIO_ACCOUNT_SID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;auth_token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TWILIO_AUTH_TOKEN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Twilio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;REST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account_sid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;twilio_message_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;vi&quot;&gt;@twilio_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;TwilioMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;twilio_message_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@twilio_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:phone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:twilio_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;twilio_message_success_path&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:phone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:twilio_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;twilio_message_failure_path&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;twilio_message_params&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:twilio_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;permit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;It has two hidden fields, which aren’t visible to the user.  The form, seen below, actually just looks like a button, however it is indeed a form.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/geofun.png&quot; alt=&quot;Geofun form&quot; class=&quot;center-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The To value is set by accessing the query string the original text message body appended on to the link that the friend opens.  The From value is always going to be my Twilio Number so this value is hardcoded (you don’t have the account_sid or auth_token so I’m not too worried).  They body is the text message body that will be sent.  In my case, I want it to be a map with the user’s location marked with a pin.  Remember how I stated how when the user opens the page it executes some JS code?  Well we’re now in a position to tie everything together and explain this in greater detail.  When the friend opens the text message link JavaScript code is executed that retrieves the device’s latitude and longitude via the HTML5 geolocation device API, sends the lat/long to Google Maps API, which returns a link to a google map with the user’s location marked on it. Then I take this url and make an AJAX request to the Bit.ly API to shorten the url since Twilio only allows text message bodies &amp;lt; 160 characters and the url returned by Google Maps is very long.  Now I have the data stored in a JS variable and just need to get it in the form somehow - easy.&lt;/p&gt;

&lt;p&gt;Browsers provide us with Javascript functions called event handlers, which allow a developer to trigger a certain function whenever an event occurs on a target element.  In other words you attach an event handler to a certian element and when a user does something to this element, something happens.   This could translate to a user clicking on a link and an alert box popping up, or a user scrolling over an element on a page and all of the images changing to different images.  You’ve probably had this happen to you countless number of times - and now you know you have JavaScript to thank for it.&lt;/p&gt;

&lt;p&gt;One of these event handlers is onready (jQuery calls it ready( ) ), which fires a given function when all of the content on a page is done loading and it is ready to be manipulated by JavaScript.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;getMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Put most basically, I wrapped all of my API calls in a ready( ) event handler so that when the friend loaded the page they all fired and the result was a Bit.ly shortened link containing my reference to the Google Maps API. I then took this variable and used some more of the power of Javascript to set that link as the value of the Body input. (note: the data.data.url parameter is just parsing the JSON response from Bit.ly)&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shorturl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#twilio_message_body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The form is essentially completed by this JS and the friend only has to click the Send ETA button. This sends a POST request to the create action of my controller, with the request body being the form inputs, which are accessable like any other parameters in a controller:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:text_field_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;i.e. params[:to], params[:from], params[:body].&lt;/p&gt;

&lt;p&gt;If you’re using Rails4 don’t forget to whitelist these params in the corresponding controller.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;twilio_message_params&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:twilio_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;permit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And thus the data I needed, which was stored in JavaScript variables has successfully been sent to my controller, saved to my database, and sent as an sms via Twilio:&lt;/p&gt;

&lt;p&gt;twilio_messages_controller.rb#create&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;vi&quot;&gt;@client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Twilio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;REST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account_sid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;twilio_message_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Feel free to reach out if you have any questions or want to go more in depth about certain topics covered.&lt;/p&gt;

&lt;p&gt;Check out the production app here: etaapp.herokuapp.com&lt;/p&gt;

&lt;p&gt;@askwheeler&lt;/p&gt;

&lt;p&gt;Find the GitHub repo here&lt;/p&gt;

&lt;p&gt;Special thanks to great friends @NateChaseH and @netspencer​ for working on this app with me, making it beautiful, and continuously inspiring me.&lt;/p&gt;

&lt;p&gt;Also check out my great friend John Capecelatro’s blog.  He is the one friend I know I can count on to be up on Saturday mornings ready to get together and hack - even after a long night out on the city.&lt;/p&gt;</content><author><name></name></author><summary type="html">“To the man who only has a hammer, everything he encounters begins to look like a nail.”</summary></entry><entry><title type="html">Our Friend Curl</title><link href="http://localhost:4000/api/2014/01/19/our-friend-curl.html" rel="alternate" type="text/html" title="Our Friend Curl" /><published>2014-01-19T05:36:14-08:00</published><updated>2014-01-19T05:36:14-08:00</updated><id>http://localhost:4000/api/2014/01/19/our-friend-curl</id><content type="html" xml:base="http://localhost:4000/api/2014/01/19/our-friend-curl.html">&lt;p&gt;In my previous post I shared my thoughts on the emergence of tens of thousands of APIs that companies are racing to develop in an attempt to see what applications people will be able to build on top of their data or services.  In this post I’d like to share a useful tool known as cURL which allows us to design a request, send it to a server, and inspect the response.&lt;/p&gt;

&lt;p&gt;Most modern APIs follow a RESTful architecture.  REST stands for representational state transfer.  Put simply RESTful architecture makes use of the web’s hypertext transfer protocol’s four main request types, GET PUT POST DELETE on resources.  You can best think of these HTTP requests as verbs acting on some resource (noun) at a given location (server.)  URLs or the things you type into the address bar in your web browser simply direct users to a certain resource.  So when we navigate to a url such as my twitter handle:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/twitter.png&quot; alt=&quot;twitter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What we are really doing is sending an HTTP GET (hence the https://) request to the host at twitter.com requesting a resource - the profile for the user ‘askwheeler’.&lt;/p&gt;

&lt;p&gt;So, what happens when we want to incorporate this user data and some other data that a given company might have, into an application of our own?  As we learned earlier we use an API if available.&lt;/p&gt;

&lt;p&gt;The most common ways you will be interacting with an API are probably ways you’re already familiar with interacting with any other website, by POSTing and GETing data to and form their servers.  Sometimes these requests are as simple as requesting a given url, but sometimes APIs require you to send somme extra info along about yourself, what info you need, and the format you would like to receive it in – remember our library example from my last post?  Before you make a request you’ll want to make sure you’ve configured your request correctly and that you are receiving the expected response.  This is where cURL comes in handy.  Commands are very simple and run directly from the command line.  You begin by typing curl, follow it by some options, and end it with a url.  We will use http echo service for our endpoint, which is a site that provides a JSON representation of the response.&lt;/p&gt;

&lt;p&gt;GET&lt;/p&gt;

&lt;p&gt;The most common request is a GET request and this is what cURL defaults to. So if we send:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-curl&quot;&gt;curl http://echo.httpkit.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will return our response:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/httpkit-get.png&quot; alt=&quot;httpkit-get&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see we simply sent a GET request asking a host “echo.httpkit.com” for the uri located at ’/’&lt;/p&gt;

&lt;p&gt;However we usually want to send more than this so the next thing you are able to do is attach some query string parameters as so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-curl&quot;&gt;curl http://echo.httpkit.com?key=value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which returns a response of:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/httpkit-kv.png&quot; alt=&quot;httpkit-kv&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see that we just sent a GET request to the same host and passed along the parameter “key” with a value of “value”&lt;/p&gt;

&lt;p&gt;Great so we can GET data from the server, but sometimes when working with APIs you need to POST data to the server, DELETE data from the server, etc.  This can easily be done with cURL using the -X plus the name of the method you want to use followed by your request.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-curl&quot;&gt;curl -X POST echo.httpkit.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which returns:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/httpkit-post.png&quot; alt=&quot;httpkit-post&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see now the method is a POST request.&lt;/p&gt;

&lt;p&gt;Other times we want to provide the host server with some meta data either about ourselves and our request, which can be done with the -H followed by the request.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-curl&quot;&gt;curl -H &quot;Authorization: Key9999999999&quot; http://echo.httpkit.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which we can see will return:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/httpkit-headers.png&quot; alt=&quot;httpkit-headers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Usually when you are POSTing or PUTing data to a server you will be including data as well as expecting the server to return a certain format, which we can do by combining -X -H and -d (for data).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-curl&quot;&gt;curl -X PUT -H 'Content-Type: application/json' \
-d '{&quot;name&quot;: &quot;Alex&quot;, &quot;favoriteColor&quot;: &quot;blue&quot;}' http://echo.httpkit.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which returns:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/httpkit-put.png&quot; alt=&quot;httpkit-put&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is just a basic intro to all of the possibilities with cURL command, but definitely a great way to get you started on your way to toying with some HTTP requests and working with APIs.  You can find more information at:&lt;/p&gt;

&lt;p&gt;http://httpkit.com/resources/HTTP-from-the-Command-Line/&lt;/p&gt;</content><author><name></name></author><summary type="html">In my previous post I shared my thoughts on the emergence of tens of thousands of APIs that companies are racing to develop in an attempt to see what applications people will be able to build on top of their data or services. In this post I’d like to share a useful tool known as cURL which allows us to design a request, send it to a server, and inspect the response.</summary></entry><entry><title type="html">What To Do With All This Data?</title><link href="http://localhost:4000/api/2014/01/18/what-to-do-with-all-of-this-data.html" rel="alternate" type="text/html" title="What To Do With All This Data?" /><published>2014-01-18T05:36:14-08:00</published><updated>2014-01-18T05:36:14-08:00</updated><id>http://localhost:4000/api/2014/01/18/what-to-do-with-all-of-this-data</id><content type="html" xml:base="http://localhost:4000/api/2014/01/18/what-to-do-with-all-of-this-data.html">&lt;p&gt;We sure are living in fascinating times.  With a seemingly endless set of powerful tools just a click away, the ability to seamlessly scale a weekend project into a thriving enterprise with a few mouse presses, and an audience of well over 2.5 billion internet users constantly plugged in ready to consume new content, I can’t think of a better time than now to be a web developer.  It seems like every day we are bombarded with news about some new gadget that runs on some technology that seemed like a mere pipe dream just a few years ago.  Between Google’s self driving cars, Amazon’s drones, and a selection of wearable tech large enough to paralyze even the geekiest of us it is no doubt that there is indeed some fascinating technology being developed every day.  While all of these gadgets are indeed insanely awesome, at the end of the day I am a web developer and I have become increasingly more excited about the emergence of a different sort of technology that not only is driving the growth of these gadgets, but that has the capability of having enormous impacts on our lives if it hasn’t already.  What I’d like to talk about in this post is of the accelerating trend of companies developing and releasing application programming interfaces, most commonly referred to as APIs, as well as a few things I’ve learned over the past couple of months familiarizing myself with tools to help us work with these APIs.&lt;/p&gt;

&lt;p&gt;First, you need to understand what an API is. A recent article on ‘readwrite.com’ described as a set of requirements that govern how one application can talk to another’.  Imagine two different libraries.  The first library has a locked door and small windows.  You might be able to see a few of the books and maybe even read some of the titles, but its near impossible to get in and find the books you’re looking for.  Now, imagine a second library that upon arrival you joyfully walk up and identify yourself at the front door.  You might have to wear shoes, bring a driver’s license, and keep your voice down, but as long as you follow the rules you’re allowed to browse around for whatever it is you’re looking for.  And even more than that you are handed a pamphlet containing extremely specific instructions as to how to find whatever book or books it is you are looking for.  As you’ve probably guessed this is exactly what APIs provide for developers.&lt;/p&gt;

&lt;p&gt;New APIs are popping up every day with companies from Dominos to Bloomberg providing access to data in the hopes that people will do awesome things with their data, or to provide easy access to a service such as Walgreens QuickPrint API, that allows an application to print documents from a variety of Walgreens stores around the United States with a simple HTTP Post Request.  Any app on your phone, computer, or tablet that accesses data from a site other than its own such as allowing you to login in through Facebook  is effectively using that company’s API.  You’re probably thinking, okay awesome, so we can build pizza delivery apps, that can print our receipt from Walgreens for one of our Facebook friends to pick up at a later date.  But this enormous amount of available data is going to have a much larger impact on our lives. Data scientists, casual researchers, and weekend hackers are able to literally drink from the firehose of data and mix, match, compare, and combine it all into amazing applications.  Don’t get me wrong, I thoroughly enjoy building hilariously stupid apps from time to time, but I do challenge those with the skills to combine some of these APIs and build something awesome.&lt;/p&gt;</content><author><name></name></author><summary type="html">We sure are living in fascinating times. With a seemingly endless set of powerful tools just a click away, the ability to seamlessly scale a weekend project into a thriving enterprise with a few mouse presses, and an audience of well over 2.5 billion internet users constantly plugged in ready to consume new content, I can’t think of a better time than now to be a web developer. It seems like every day we are bombarded with news about some new gadget that runs on some technology that seemed like a mere pipe dream just a few years ago. Between Google’s self driving cars, Amazon’s drones, and a selection of wearable tech large enough to paralyze even the geekiest of us it is no doubt that there is indeed some fascinating technology being developed every day. While all of these gadgets are indeed insanely awesome, at the end of the day I am a web developer and I have become increasingly more excited about the emergence of a different sort of technology that not only is driving the growth of these gadgets, but that has the capability of having enormous impacts on our lives if it hasn’t already. What I’d like to talk about in this post is of the accelerating trend of companies developing and releasing application programming interfaces, most commonly referred to as APIs, as well as a few things I’ve learned over the past couple of months familiarizing myself with tools to help us work with these APIs.</summary></entry><entry><title type="html">Project Based Learning, Chrome Extensions, and Cats</title><link href="http://localhost:4000/javascript/chrome/extension/2013/12/10/project-based-learning-chrome-extensions-and-cats.html" rel="alternate" type="text/html" title="Project Based Learning, Chrome Extensions, and Cats" /><published>2013-12-10T05:36:14-08:00</published><updated>2013-12-10T05:36:14-08:00</updated><id>http://localhost:4000/javascript/chrome/extension/2013/12/10/project-based-learning-chrome-extensions-and-cats</id><content type="html" xml:base="http://localhost:4000/javascript/chrome/extension/2013/12/10/project-based-learning-chrome-extensions-and-cats.html">&lt;p&gt;Everyone has their unique way of learning.  Understanding and embracing this idea is one of the most important steps towards accelerating one’s learning.  There are three main types of learners: auditory, visual, and kinesthetic.  Auditory learners prefer listening to concepts being explained, visual learners learn by looking at graphics, and kinesthetic learners learn by touch or hands-on experience.  Some people only identify with one of the three types, while others can relate to a combination of all three.  Take for example the petite Chinese girl that sits next to me in one of my economics classes.  Every day she records the lecture on her iPhone so that at a later date she is able to listen and watch the lectures again and then complete problem sets to truly nail the concepts.  She obviously identifies with all three types.  She also enjoys heavy metal and walking into class with her headphones on full blast jamming Slayer - the last thing you would guess from the pint-sized, quiet international student, but she knows she enjoys it and that’s totally badass.  Anyways, the point is that everyone has a different way of learning and identifying how you learn best is critical towards accelerating your learning.&lt;/p&gt;

&lt;p&gt;I can confidently say that I am a kinesthetic learner - I learn best by doing.  I know that I better understand concepts from my classes after completing a few problem sets. Knowing this I am able to apply it to any sort of learning I am doing - especially programming.  My most recent learning has involved mastering JavaScript.  JavaScript is an essential tool for developing modern web applications.  This idea combined with the allure of the many JS frameworks gaining momentum are two of the main reasons I’ve chosen this as my next language to learn .&lt;/p&gt;

&lt;p&gt;Despite what you may have heard JavaScript is actually an extremely useful, powerful language, especially when you take into account that Netscape only gave Brendan Eich about ten days to design it. (side note: the history of JS is extremely interesting, check out some Douglass Crockfords videos on the subject).  Combined with the DOM or Document Object Model, javascript allows us to manipulate just about anything on a given page.  To put it shortly, when you, the client, send an http GET request to a server, that server responds with the necessary files, and assembles the HTML into a tree consisting or parent nodes and child nodes, which we, the developers, with a little bit of javascript knowledge can access and manipulate.  With permission, chrome extensions can access many things ranging from the current tab’s DOM to Facebook and twitter data.  Yes, the possibilities are endless.&lt;/p&gt;

&lt;p&gt;So, I knew I wanted to build a chrome extensions, while deepening my understanding of javascript.  As any other rational person would have done I decided to build an extension that would replace all of the images on a given page with pictures of cats and money.&lt;/p&gt;

&lt;p&gt;After setting up a few files that the chrome web store requires to be included in your app it was time to begin building.&lt;/p&gt;

&lt;p&gt;There are two main files to the app:&lt;/p&gt;

&lt;p&gt;1.) background.js - simply tells chrome to run a file I named script.js when the user clicks the extension’s icon.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browserAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onClicked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tabs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;executeScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;script.js&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.) script.js - contains my JS code that manipulates all of the images.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;catImages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cat1.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cat2.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cat3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,
                   &quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,
                   &quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,  &quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,
                   &quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;]

var numberOfImageNodes = document.getElementsByTagName(&quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IMG&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;).length;

function bringOnTheCats(numberOfImages) {
  for (x=0; x &amp;lt; numberOfImages; x++) {
    var randomNumber = Math.floor(Math.random() * 10);
    var image = document.getElementsByTagName(&quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IMG&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;catImages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randomNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Breaking down the problem at hand I figured I needed:&lt;/p&gt;

&lt;p&gt;1.) a collection of cat images to replace the original images.&lt;/p&gt;

&lt;p&gt;2.) a value for how many images the page contained since I can’t change the image source for an undefined object.&lt;/p&gt;

&lt;p&gt;3.) A loop to iterate through the images and change their source&lt;/p&gt;

&lt;p&gt;Let’s break down my code:&lt;/p&gt;

&lt;p&gt;Arrays are one of the most common data structures used in programming and for good reason, they are indexed and able to be iterated through, therefore they seem to work really well with loops.&lt;/p&gt;

&lt;p&gt;I begin on line 1 by making an array catImages that contains all of my cat image files.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;catImages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cat1.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cat2.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cat3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,
                 &quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,
								 &quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;, &quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,  &quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,
								 &quot;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cat10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;png&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, I create a variable called numberOfImageNodes, which simply counts how many images the page contains.  To do this I call #getElementsByTagName(“IMG”) on document, which returns an array of all of the elements with an image tag. Then I simply call length on this returned array, which tells me how many values the array contains, translating to how many images the page has.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numberOfImageNodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;IMG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, comes time for the function that is going to tie all of these together.&lt;/p&gt;

&lt;p&gt;I create a function called bringOnTheCats that takes one parameter - numberOfImages.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bringOnTheCats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numberOfImages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numberOfImages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;IMG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;catImages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randomNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note: this function doesn’t necessarily need this parameter and I could have left it out and replaced numberOfImages on line 6 with numberOfImageNodes since I declared it as a global variable, but I figured by passing a parameter my function would be more flexible for future iterations.&lt;/p&gt;

&lt;p&gt;Within this function on line 6 I create a loop that sets a variable x to 0, and states while x is less than the number of images on the page, increase x by 1 after each iteration.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numberOfImages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On line 8 I create a variable randomNumber, which on every iteration gives me a new random number ranging from 0 - 10. Breaking this line down: Math.floor rounds down whatever number it is passed as an argument. Math.random()&lt;em&gt;10 returns a random number ranging from 0-10, however it is not always a whole number, so we must round it down hence why we combine the two to make Math.floor(Math.random()&lt;/em&gt;10).&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Lines 9 &amp;amp; 10 are where we truly tie everything together and where the real magic happens.  As I explained earlier #document.getElementsByTagName(“IMG”) returns an array containing all of the images on the page. On every iteration of the loop, an image at index x of that array has its source set to an image file at a random index (between 0-10) from the catImages array.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;IMG&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;catImages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;randomNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Line 13 calls the function bringOnTheCats and passes in the numberOfImageNodes and we are done.  Now, if a user downloads the extension, navigates to a url, and clicks on the icon, this function will be called and cats will take over the user’s page.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;bringOnTHeCats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numberOfImageNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now that you know how it works, see it in action:&lt;/p&gt;

&lt;p&gt;Pussify in the chrome web store&lt;/p&gt;

&lt;p&gt;Source code on GitHub&lt;/p&gt;</content><author><name></name></author><summary type="html">Everyone has their unique way of learning. Understanding and embracing this idea is one of the most important steps towards accelerating one’s learning. There are three main types of learners: auditory, visual, and kinesthetic. Auditory learners prefer listening to concepts being explained, visual learners learn by looking at graphics, and kinesthetic learners learn by touch or hands-on experience. Some people only identify with one of the three types, while others can relate to a combination of all three. Take for example the petite Chinese girl that sits next to me in one of my economics classes. Every day she records the lecture on her iPhone so that at a later date she is able to listen and watch the lectures again and then complete problem sets to truly nail the concepts. She obviously identifies with all three types. She also enjoys heavy metal and walking into class with her headphones on full blast jamming Slayer - the last thing you would guess from the pint-sized, quiet international student, but she knows she enjoys it and that’s totally badass. Anyways, the point is that everyone has a different way of learning and identifying how you learn best is critical towards accelerating your learning.</summary></entry><entry><title type="html">Design Descisions, Hackathons, and Rails Callbacks</title><link href="http://localhost:4000/ruby/rails/hackathon/2013/12/07/design-decisions-hackathons-and-rails-callbacks.html" rel="alternate" type="text/html" title="Design Descisions, Hackathons, and Rails Callbacks" /><published>2013-12-07T05:36:14-08:00</published><updated>2013-12-07T05:36:14-08:00</updated><id>http://localhost:4000/ruby/rails/hackathon/2013/12/07/design-decisions-hackathons-and-rails-callbacks</id><content type="html" xml:base="http://localhost:4000/ruby/rails/hackathon/2013/12/07/design-decisions-hackathons-and-rails-callbacks.html">&lt;p&gt;&lt;img src=&quot;/assets/yhacks.png&quot; alt=&quot;yhakcs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The thought of spending a full twenty-four hours writing code, passing on a good nights sleep, and surviving off of countless cups of coffee may not seem like the most ideal way to spend a weekend in college, but just like anything in life you can’t knock it until you try it.  If you have never experienced a hackathon you sure have been missing out on an epic experience.  While these events do offer prizes to teams who successfully build the best project, hackathons are about much more than the prize money.  They are about learning something new, making new friends, and of course scoring backpacks full of free swag from sponsors.  I recently attended Y-Hack, Yale’s first hackathon, and as I expected it turned out to be an awesome time.  Besides walking away with a finished project, I made some awesome friends, learned some new concepts, and witnessed a rap battle at 2 am.  While I could spend hours discussing my thoughts on hackathons that isn’t the goal of this post.  Instead I would like to dedicate the rest of this post to go over a few of the design decisions I found myself having to make in the process of building my application, using Rails’s Callbacks, and some lessons learned.&lt;/p&gt;

&lt;p&gt;I had been wanting to build a surfing app for quite some time and figured this was the perfect opportunity make it happen…in twenty-four hours.&lt;/p&gt;

&lt;p&gt;My plan was to make the application as simple and seamless as possible for the user.  The first thing I do when planning out a programming project is to map out the flow of the app.  Mine went something like this:&lt;/p&gt;

&lt;p&gt;user navigates to home page and creates an account —&amp;gt; redirected to page to chose location —&amp;gt; redirected to success page.&lt;/p&gt;

&lt;p&gt;Simple enough.&lt;/p&gt;

&lt;p&gt;With only twenty-four hours to submit your app at most hackathons you need make sure to keep things as simple as possible, while still making for an awesome user experience.  One of my biggest design decisions was to decide how I wanted to send the surf report via text message to the user.  I could have used Twilio, an SF based cloud company with an awesome API for integrating SMS with your application, however I chose not to for three reasons:&lt;/p&gt;

&lt;p&gt;Why use an external service when rails can handle this functionality and I am trying to keep things simple?
 I am beginning a new project dealing with emergency response that will utilize SMS, but can’t rely on external services during times such as hurricane, floods, etc -  this was a great opportunity to figure out how to handle sending texts with rails.
Lastly, Twilio wasn’t a sponsor and therefore was not offering any prizes for integrating their API.
Do you remember your earlier cell phone days? Or would we rather forget about those dark days? Did you ever happen to send a text message to an email address?  Well I did, and it worked, therefore I figured I could simply reverse this process and send an email to a cell phone.  After some quality research (simple googling) I confirmed my assumption and learned that all you need to do is append the proper ending based upon the carrier as seen below.  Since Rails does indeed ship with a mailer it looks like we’re all set to send some surf reports.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/phone-ext.png&quot; alt=&quot;phone-extensions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, all I had to do was collect a user’s cellphone number and carrier and append the correct ending.  The first part was simply accomplished by adding a drop down to select one of the three most common carriers on my home page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/smsurf.png&quot; alt=&quot;smsurf&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Okay, so we have a phone number and carrier.  Now we need some logic to tell Rails which ending it should append based upon the chosen carrier. The best tool for this job turned out to be a Callback.  Rails’s API defines Callbacks’ as hooks into the life cycle of an Active Record object that allow you to trigger logic before or after an alteration of the object state. In other words callbacks allow us to trigger some sort of logic before or after we do something to an object - in our case before an object is validated, and thus saved into our database.&lt;/p&gt;

&lt;p&gt;My User model has four attributes: email, password, phone_number, carrier.&lt;/p&gt;

&lt;p&gt;I defined three callbacks for the three different carrier options in my user model as so:&lt;/p&gt;

&lt;p&gt;user.rb&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append_verison_ending&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;phone_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;phone_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@vtext.com&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append_att_ending&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;phone_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;phone_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@txt.att.net&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;append_sprint_ending&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;phone_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;phone_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@messaging@sprintpcs.com&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These methods take the objects phone_number attribute and simply concatenate the ending and the phone_number - both strings objects.&lt;/p&gt;

&lt;p&gt;Next, we must tell our application when to append each ending based on the given conditions, so we make three more methods:&lt;/p&gt;

&lt;p&gt;user.rb&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;carrier_is_verizon?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;carrier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;verizon&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;carrier_is_att?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;carrier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;att&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;carrier_is_sprint?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;carrier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sprint&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;All these methods do is check the carrier the object’s carrier attribute and whichever one matches will return true.&lt;/p&gt;

&lt;p&gt;Now by combining these methods we are able to  conditionally implement the callbacks:&lt;/p&gt;

&lt;p&gt;user.rb&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;before_validation&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:append_verizon_ending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:carrier_is_verizon?&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;before_validation&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:append_att_ending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:carrier_is_att?&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;before_validation&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:append_sprint_ending&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:carrier_is_sprint?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And we are done! Now when a user record saves, the proper ending will be appended allowing us to send a text message to the user via Rails’ built in mailer.&lt;/p&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">On Adventure and Reaching Out</title><link href="http://localhost:4000/hustle/2013/11/18/on-adventure-and-reaching-out.html" rel="alternate" type="text/html" title="On Adventure and Reaching Out" /><published>2013-11-18T05:36:14-08:00</published><updated>2013-11-18T05:36:14-08:00</updated><id>http://localhost:4000/hustle/2013/11/18/on-adventure-and-reaching-out</id><content type="html" xml:base="http://localhost:4000/hustle/2013/11/18/on-adventure-and-reaching-out.html">&lt;p&gt;I’m currently sitting in my new apartment, watching the sun rise over the monstrous Andes, warming
up with a fresh cup of coffee, and wondering how the hell I ended up over 8500 kilometers away from
home with a $40,000 grant from the Chilean government. Prior to this adventure I had never been to
South America, my Spanish was mediocre at best, and the closest thing I knew to Latin culture was
grabbing a breakfast burrito from the local taco stand in my small hometown in Southern California.
I would like to believe that I ended up here by my own doing, like some sort of fearless pirate
whose crew had abandoned him. This couldn’t be further from the truth. The reason I’m here has
little to do with my own intelligence, grades, or luck. I wouldn’t consider myself a smart person.
My grades are pretty average, and the best luck I’ve recently had was finding 100 pesos on the
ground, which at today’s exchange rate could buy me a lollipop. The real reason why I’m here is
because of the wisdom, encouragement, and patience of those that I have luckily found myself
surrounded by. Steve Jobs put it best when he said “You can’t connect the dots looking forward you
can only connect them looking backwards.” So, that is exactly what this post aims to do - connect
the dots and make sense of how I ended up here, and hopefully encourage a few others to expand their
horizons because it has never been easier.&lt;/p&gt;

&lt;h2 id=&quot;where-our-potential-network-of-friends-was-once-dictated-by-the-number-of-people-that-lived-in-our-home-town-it-is-now-relative-to-the-number-of-people-on-the-internet&quot;&gt;“Where our potential network of friends was once dictated by the number of people that lived in our home town, it is now relative to the number of people on the internet.”&lt;/h2&gt;

&lt;p&gt;We happen to be living in very exciting times. The public World Wide Web recently turned 20 years
old, we found out the United States has been spying on us for years (read: Edward Snowden), but even
more exciting, we know that there are more than &lt;strong&gt;2.7 billion&lt;/strong&gt; internet users worldwide. It has never
been easier to connect with anyone in the entire world. Where our potential network of friends was
once dictated by the number of people that lived in our home town, it is now relative to the number
of people using the internet. Where we once had to send a letter, or make a phone call to connect
with those outside of our friend circle, we can now send an email, post a tweet, write a Facebook
message, comment on tumblr…and the list goes on. The point is that in today’s connected world there
is &lt;strong&gt;no reason&lt;/strong&gt; you shouldn’t be talking to the people that inspire you the most. Over the course
of the past couple of weeks I’ve been thinking hard about the decisions that have had a large,
positive impact on my life. I never thought a bunch of extremely talented developers writing code
far superior to mine would be more than willing to take time out of their day to share a beer in
their office and discuss how I could improve my programming techniques. I never knew that the answer
to a difficult problem, no matter how simple the solution, was just a tweet away. But most of all I
never understood what the word &lt;em&gt;networking&lt;/em&gt; meant. The word still brings to mind images of young
adults in suits flaunting leather resume holders, grinning and agreeing with everything the speaker
at the job fair happens to be talking about. Call it networking, making friends, or just a step
closer to another reason to have a beer with someone, but reaching out to others is one of the most
powerful actions you can take to get to where you want to be.&lt;/p&gt;

&lt;h2 id=&quot;armed-with-an-internet-connection-and-a-little-curiosity-it-is-possible-to-reach-just-about-anyone-in-the-world&quot;&gt;“Armed with an internet connection and a little curiosity it is possible to reach just about anyone in the world”&lt;/h2&gt;

&lt;p&gt;Andy happened to be publishing some pretty interesting posts on his personal blog. These posts
covered anything from a quest to find his new
&lt;a href=&quot;http://www.andyellwood.com/2013/02/hobbies-and-hopheads/&quot;&gt;favorite beer&lt;/a&gt; to &lt;a href=&quot;http://www.andyellwood.com/2013/06/wave-on-wave/&quot;&gt;how bodysurfing and success&lt;/a&gt; follow a
similar pattern. After following his blog for some time I decided I needed to get a hold of him if
even to just see if he would respond to a 19-year-old beach bum from Southern California. So, about
a year ago I sent Andy a simple email asking for some book recommendations. To my amazement I opened
my inbox a few days later to see a new message with a complete list of books to read and some words
of encouragement. Why would such a busy guy go out of his way to respond to an email from me? I’ve
never had a &lt;a href=&quot;https://www.forbes.com/sites/andyellwood/#3c4d23477bdc&quot;&gt;Forbes column&lt;/a&gt; and I have never been a part of &lt;a href=&quot;http://mashable.com/2011/12/05/facebooks-acquires-gowalla/#SDris0q1Qkqp&quot;&gt;an acquisition&lt;/a&gt;, let alone &lt;a href=&quot;https://www.wired.com/2013/06/google-waze-acquisition/&quot;&gt;two&lt;/a&gt;. It turns
out that most people actually want to see you succeed. They have been in your position and have no
problem sharing some lessons learned along the way. This single email opened up an entire new world
to me. Armed with an internet connection and a little curiosity it is possible to reach just about
anyone in the world.&lt;/p&gt;

&lt;h2 id=&quot;start-today-because-everyone-knows-the-best-time-to-start-was-yesterday&quot;&gt;“Start today because everyone knows the best time to start was yesterday”&lt;/h2&gt;

&lt;p&gt;Spring semester was quickly winding down and I needed to figure out what I was going to do for the
next few months. Once again I turned to those who had been there before and sent Andy another email.
While I didn’t get a list of books to read I did get some more words of encouragement and an email
introduction to a friend of Andy’s working on a cool project in Chile. A few weeks later I would
find out that I needed to hop on a plane to Santiago, Chile. Myself and two co-founders had been
accepted into Startup Chile’s 7th generation and granted a $40,000 equity-free grant to relocate to
Santiago and work with teams from 28 different countries to work on launching a product, while
helping the country achieve its goal of transforming itself into the technology hub of Latin
America.&lt;/p&gt;

&lt;p&gt;Since then I have made it a routine to reach out to those I find most interesting and encourage you
to do the same. If you try a product and like it tweet at the creators and tell them what about it
you enjoyed. Likewise, if you try a product and don’t like it let those involved know what you think
could be improved. Find yourself checking someone’s blog every day and really relating to the
content? Email them. Tweet them. Message them. I guarantee that the majority of the time you will
get a thoughtful response. The only way to get better at something is to practice. &lt;strong&gt;So start today
because everyone knows the best time to start was yesterday.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Feel free to start now &lt;a href=&quot;https://twitter.com/askwheeler&quot;&gt;@askwheeler&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks &lt;a href=&quot;https://twitter.com/andyellwood&quot;&gt;@andyellwood&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m currently sitting in my new apartment, watching the sun rise over the monstrous Andes, warming up with a fresh cup of coffee, and wondering how the hell I ended up over 8500 kilometers away from home with a $40,000 grant from the Chilean government. Prior to this adventure I had never been to South America, my Spanish was mediocre at best, and the closest thing I knew to Latin culture was grabbing a breakfast burrito from the local taco stand in my small hometown in Southern California. I would like to believe that I ended up here by my own doing, like some sort of fearless pirate whose crew had abandoned him. This couldn’t be further from the truth. The reason I’m here has little to do with my own intelligence, grades, or luck. I wouldn’t consider myself a smart person. My grades are pretty average, and the best luck I’ve recently had was finding 100 pesos on the ground, which at today’s exchange rate could buy me a lollipop. The real reason why I’m here is because of the wisdom, encouragement, and patience of those that I have luckily found myself surrounded by. Steve Jobs put it best when he said “You can’t connect the dots looking forward you can only connect them looking backwards.” So, that is exactly what this post aims to do - connect the dots and make sense of how I ended up here, and hopefully encourage a few others to expand their horizons because it has never been easier.</summary></entry><entry><title type="html">Wicked Good Ruby Conf</title><link href="http://localhost:4000/jekyll/update/2013/11/08/wicked-good-ruby-conf.html" rel="alternate" type="text/html" title="Wicked Good Ruby Conf" /><published>2013-11-08T05:36:14-08:00</published><updated>2013-11-08T05:36:14-08:00</updated><id>http://localhost:4000/jekyll/update/2013/11/08/wicked-good-ruby-conf</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2013/11/08/wicked-good-ruby-conf.html">&lt;p&gt;The people have spoken. Wicked Good Ruby Conf, Boston’s first annual Ruby conference was a major success. Over the course of two days Rubyists from around the world joined together at the World Trade Center Boston to share ideas, discuss best practices, and have an overall epic time. (did I mention the open bar?) Thanks to the team at EverTrue (you guys rock) I was able to attend and share my experience with you.&lt;/p&gt;

&lt;p&gt;I could talk about everything I learned — the countless ways you can automate your entire home with a basic understanding of Ruby, why there really is no such thing as bad code, or why Sandy Metz won’t actually show up at your front door if your methods contain more than five lines of code. However, I would much rather focus on my biggest overall take away from the whole weekend– why I think that as developers, more specifically Ruby developers, we are some of the luckiest people in the world.&lt;/p&gt;

&lt;p&gt;Sandy Metz made an interesting point in her keynote when she touched on the fact that all of us somehow, in some way or another, ended up in this awesome profession where we get to turn ideas into reality. Perhaps your parents were programmers and had you writing code before you could walk, perhaps you started your technical journey by simply wanting to create a cool website when you were younger, or maybe you read the most recent tech blog about how everyone should learn to code and recently decided to switch career paths. The point is that it doesn’t matter how we all got here, but what is most important is that we are all here, sharing knowledge, making great friends, and building cool products.&lt;/p&gt;

&lt;p&gt;Every person I crossed paths with over the course of the weekend seemed to be overly ecstatic about discussing anything and everything Ruby. With skill sets ranging from beginners to industry veterans there were plenty of interesting conversations to be made. Learning to code is by no means an easy task. We spend dozens of hours a week huddled over our computers running into bugs, reading and re-reading error messages, and sometimes working late into the night just to see some green dots scramble across our screen (because of course you’re testing…right). Why do we spend a countless number of hours digging through stack traces trying to find what went wrong simply to get some basic code to run? It could be the wizard-like feeling of commanding our computers with the pressing of a few keys, the ability to turn dreams into reality, or maybe it is just the free beer and food at many similar events. While these are all valid possibilities I strongly believe that the biggest force driving each and every one of us to continue to perfect our craft and remain just as excited as the day we first popped open a text editor is the amazing community we have found ourselves surrounded by. A community that offers random students like myself free tickets to amazing events. A community that doesn’t care whether you wrote code before you could tie your shoes or just learned the difference between an array and a hash. A community that puts on amazing conferences, such as Wicked Good Ruby Conf, that keep our community growing. Given all of this I’m not surprised I met attendees from places as far away as the Netherlands and Australia. We truly are some of the luckiest people in the world. Of course we get to write beautiful, abstract code every day, but we are also a part of one of the strongest, most helpful communities I could imagine. So thanks, because without you — the developer, the mother, the son, the student, the mentor — this all wouldn’t be possible.&lt;/p&gt;

&lt;p&gt;Huge thanks to EverTrue for the ticket. Without you guys I would have missed out on an amazing weekend.&lt;/p&gt;

&lt;p&gt;Also, an eternal thanks to the organizers and the Ruby community at large — without all of you I’m not quite sure where I would be.&lt;/p&gt;

&lt;p&gt;Would love to hear about your positive experiences!&lt;/p&gt;

&lt;p&gt;@askwheeler&lt;/p&gt;

&lt;p&gt;github.com/alexwheeler&lt;/p&gt;</content><author><name></name></author><summary type="html">The people have spoken. Wicked Good Ruby Conf, Boston’s first annual Ruby conference was a major success. Over the course of two days Rubyists from around the world joined together at the World Trade Center Boston to share ideas, discuss best practices, and have an overall epic time. (did I mention the open bar?) Thanks to the team at EverTrue (you guys rock) I was able to attend and share my experience with you.</summary></entry></feed>